name: Build and Push Container Images

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies and generate lockfile
      run: |
        export NPM_CONFIG_LOGLEVEL=error
        npm install --silent
        ls -la package-lock.json || echo "No package-lock.json generated"

    - name: Generate Convex files
      run: |
        # Ensure the _generated directory exists
        mkdir -p convex/_generated
        
        # Create minimal stub files needed for build
        echo '/* eslint-disable */' > convex/_generated/api.js
        echo 'import { anyApi } from "convex/server";' >> convex/_generated/api.js
        echo 'export const api = anyApi;' >> convex/_generated/api.js
        echo 'export const internal = anyApi;' >> convex/_generated/api.js
        
        echo 'export declare const api: any;' > convex/_generated/api.d.ts
        echo 'export declare const internal: any;' >> convex/_generated/api.d.ts
        
        echo 'export { query, mutation, action, internalQuery, internalMutation, internalAction, httpAction } from "convex/server";' > convex/_generated/server.js
        
        echo 'export { query, mutation, action, internalQuery, internalMutation, internalAction, httpAction } from "convex/server";' > convex/_generated/server.d.ts
        
        # List files for debugging
        echo "Generated Convex files:"
        ls -la convex/_generated/

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels)
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix=sha-

    - name: Build and push Docker image
      id: build-and-push
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
