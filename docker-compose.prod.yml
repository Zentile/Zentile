services:
  # Convex Backend Service
  convex-backend:
    image: ghcr.io/get-convex/convex-backend:c1a7ac393888d743e704de56cf569a154b4526d4
    restart: unless-stopped
    stop_grace_period: 10s
    stop_signal: SIGINT
    ports:
      - "${CONVEX_PORT:-3210}:3210"
      - "${CONVEX_SITE_PROXY_PORT:-3211}:3211"
    volumes:
      - convex_data:/convex/data
    environment:
      - INSTANCE_NAME=${INSTANCE_NAME:-zentile}
      - INSTANCE_SECRET=${INSTANCE_SECRET:-}
      - CONVEX_CLOUD_ORIGIN=${CONVEX_CLOUD_ORIGIN:-http://127.0.0.1:${CONVEX_PORT:-3210}}
      - CONVEX_SITE_ORIGIN=${CONVEX_SITE_ORIGIN:-http://127.0.0.1:${CONVEX_SITE_PROXY_PORT:-3211}}
      - DISABLE_BEACON=${DISABLE_BEACON:-true}
      - REDACT_LOGS_TO_CLIENT=${REDACT_LOGS_TO_CLIENT:-true}
      - DO_NOT_REQUIRE_SSL=${DO_NOT_REQUIRE_SSL:-}
      - POSTGRES_URL=${POSTGRES_URL:-}
      - MYSQL_URL=${MYSQL_URL:-}
      - RUST_LOG=${RUST_LOG:-info}
      # S3 configuration (optional)
      - AWS_REGION=${AWS_REGION:-}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - S3_STORAGE_EXPORTS_BUCKET=${S3_STORAGE_EXPORTS_BUCKET:-}
      - S3_STORAGE_SNAPSHOT_IMPORTS_BUCKET=${S3_STORAGE_SNAPSHOT_IMPORTS_BUCKET:-}
      - S3_STORAGE_MODULES_BUCKET=${S3_STORAGE_MODULES_BUCKET:-}
      - S3_STORAGE_FILES_BUCKET=${S3_STORAGE_FILES_BUCKET:-}
      - S3_STORAGE_SEARCH_BUCKET=${S3_STORAGE_SEARCH_BUCKET:-}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3210/version"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    networks:
      - grid-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      init-db:
        condition: service_completed_successfully

  # Postgres Database Service
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: convex
      POSTGRES_USER: convex
      POSTGRES_PASSWORD: convex
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U convex"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - grid-network

  # MinIO Object Storage Service
  minio:
    image: minio/minio:latest
    command: server --console-address ":9001" /data
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: zentile
      MINIO_ROOT_PASSWORD: b4acb48c1c6b183b9a75b84dca5b34c4ec66e7fc03b3b8375c17b4b6a464e082
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - grid-network

  # Database Initialization Service
  init-db:
    image: postgres:15-alpine
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGPASSWORD: convex
    entrypoint:
      - sh
      - -c
      - |
        sleep 5
        db_exists=$$(psql -h postgres -U convex -d postgres -tAc "SELECT 1 FROM pg_database WHERE datname='convex'")
        if [ "$$db_exists" != "1" ]; then
          psql -h postgres -U convex -d postgres -c "CREATE DATABASE convex"
        else
          echo "Database 'convex' already exists"
        fi
    networks:
      - grid-network

  # Convex Dashboard Service (optional for production)
  convex-dashboard:
    image: ghcr.io/get-convex/convex-dashboard:c1a7ac393888d743e704de56cf569a154b4526d4
    restart: unless-stopped
    stop_grace_period: 10s
    stop_signal: SIGINT
    ports:
      - "${CONVEX_DASHBOARD_PORT:-6791}:6791"
    environment:
      - NEXT_PUBLIC_DEPLOYMENT_URL=${NEXT_PUBLIC_DEPLOYMENT_URL:-http://127.0.0.1:${CONVEX_PORT:-3210}}
    depends_on:
      convex-backend:
        condition: service_healthy
    networks:
      - grid-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    profiles:
      - dashboard

  # ZenTile Nuxt App
  zentile:
    image: ${ZenTile_IMAGE:-ghcr.io/mrvdog/zentile:latest}
    restart: unless-stopped
    ports:
      - "${NUXT_PORT:-3000}:3000"
    volumes:
      - admin_keys:/shared:ro
      - zentile_build_cache:/tmp/.buildx-cache
    environment:
      - CONVEX_SELF_HOSTED_URL=http://convex-backend:3210
      - CONVEX_SELF_HOSTED_ADMIN_KEY_FILE=/shared/admin_key
      - NUXT_HOST=0.0.0.0
      - NUXT_PORT=3000
      - NODE_ENV=production
    depends_on:
      convex-backend:
        condition: service_healthy
      admin-key-generator:
        condition: service_completed_successfully
      convex-build:
        condition: service_completed_successfully
    networks:
      - grid-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    command: ["sh", "-c", "npm run build && npm run start"]
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Convex Build Service
  convex-build:
    build:
      context: .
      target: production
      cache_from:
        - node:22-alpine
        - type=local,src=/tmp/.buildx-cache
    image: ${ZenTile_IMAGE:-ghcr.io/mrvdog/zentile:latest}
    working_dir: /app
    volumes:
      - .:/app
      - admin_keys:/shared:ro
      - zentile_build_cache:/tmp/.buildx-cache
    environment:
      - NODE_ENV=production
      - CONVEX_SELF_HOSTED_URL=http://convex-backend:3210
      - CONVEX_SELF_HOSTED_ADMIN_KEY_FILE=/shared/admin_key
    depends_on:
      convex-backend:
        condition: service_healthy
      admin-key-generator:
        condition: service_completed_successfully
    command: ["sh", "-c", "npx convex deploy"]
    restart: on-failure
    networks:
      - grid-network

  # Admin Key Generator (runs once to generate the admin key)
  admin-key-generator:
    image: alpine:latest
    volumes:
      - admin_keys:/shared
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: >
      sh -c "
      if [ ! -f /shared/admin_key ]; then
        echo 'Waiting for Convex backend to be ready...'
        # Wait for backend to be accessible
        while ! wget -q --spider http://convex-backend:3210/version; do
          echo 'Backend not ready, waiting...'
          sleep 2
        done
        echo 'Backend is ready, generating admin key...'
        
        # Install docker CLI and curl
        apk add --no-cache docker-cli curl jq
        
        # Try to generate admin key using docker exec on the backend service
        ADMIN_KEY=$$(docker exec zentile-convex-backend-1 ./generate_admin_key.sh 2>/dev/null | tail -1)
        
        if [ -n \"$$ADMIN_KEY\" ] && [ \"$$ADMIN_KEY\" != \"\" ] && [ \"$$ADMIN_KEY\" != \"null\" ]; then
          echo \"$$ADMIN_KEY\" > /shared/admin_key
          echo 'Admin key generated using backend script and saved to /shared/admin_key'
          echo 'Admin key: '$$ADMIN_KEY
        else
          echo 'Failed to generate admin key using backend script, trying API...'
          # Try the API approach as fallback
          ADMIN_KEY=$$(curl -s -X POST http://convex-backend:3210/api/admin_key 2>/dev/null | jq -r '.admin_key' 2>/dev/null)
          
          if [ -n \"$$ADMIN_KEY\" ] && [ \"$$ADMIN_KEY\" != \"null\" ] && [ \"$$ADMIN_KEY\" != \"\" ]; then
            echo \"$$ADMIN_KEY\" > /shared/admin_key
            echo 'Admin key generated via API and saved to /shared/admin_key'
            echo 'Admin key: '$$ADMIN_KEY
          else
            echo 'Both methods failed, creating secure random key...'
            ADMIN_KEY=$$(head -c 32 /dev/urandom | base64 | tr -d '=+/' | cut -c1-43)
            echo \"$$ADMIN_KEY\" > /shared/admin_key
            echo 'Secure admin key generated: '$$ADMIN_KEY
          fi
        fi
      else
        echo 'Admin key already exists, using existing key:'
        cat /shared/admin_key
      fi
      "
    restart: "no"
    depends_on:
      convex-backend:
        condition: service_healthy
    networks:
      - grid-network

volumes:
  convex_data:
    driver: local
  admin_keys:
    driver: local
  zentile_build_cache:
  postgres_data:
  minio_data:

networks:
  grid-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: grid-br0
