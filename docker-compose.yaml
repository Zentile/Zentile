services:
  zentile:
    build:
      context: .
      target: runner
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - CONVEX_SELF_HOSTED_URL=${CONVEX_SELF_HOSTED_URL:-http://convex-backend:3210}
    depends_on:
      convex-backend:
        condition: service_healthy
      init-db:
        condition: service_completed_successfully
    command: >
      sh -c '
        echo "Waiting for Convex backend...";
        while ! curl -sf http://convex-backend:3210/version > /dev/null; do sleep 1; done;
        echo "Convex backend is ready.";

        echo "Generating admin key...";
        ADMIN_KEY=$$(curl -s -X POST http://convex-backend:3210/api/admin_key | jq -r ''.admin_key'');
        if [ -z "$$ADMIN_KEY" ] || [ "$$ADMIN_KEY" = "null" ]; then
          echo "Failed to get admin key";
          exit 1;
        fi
        export CONVEX_SELF_HOSTED_ADMIN_KEY=$$ADMIN_KEY;

        echo "--- Running production deploy ---";
        npx convex deploy --prod;

        echo "--- Starting Nuxt server ---";
        node .output/server/index.mjs;
      '
    networks:
      - zentile-network

  # Convex Backend Service
  convex-backend:
    image: ghcr.io/get-convex/convex-backend:c1a7ac393888d743e704de56cf569a154b4526d4
    restart: unless-stopped
    stop_grace_period: 10s
    stop_signal: SIGINT
    ports:
      - "3210:3210"
    volumes:
      - convex_data:/convex/data
    environment:
      - INSTANCE_NAME=${INSTANCE_NAME:-zentile}
      - INSTANCE_SECRET=${INSTANCE_SECRET:-}
      - CONVEX_CLOUD_ORIGIN=${CONVEX_CLOUD_ORIGIN:-http://127.0.0.1:3210}
      - CONVEX_SITE_ORIGIN=${CONVEX_SITE_ORIGIN:-http://127.0.0.1:3211}
      - DISABLE_BEACON=${DISABLE_BEACON:-true}
      - REDACT_LOGS_TO_CLIENT=${REDACT_LOGS_TO_CLIENT:-true}
      - DO_NOT_REQUIRE_SSL=${DO_NOT_REQUIRE_SSL:-true}
      - POSTGRES_URL=postgres://convex:convex@postgres:5432
      - RUST_LOG=${RUST_LOG:-info}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3210/version"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    networks:
      - zentile-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    depends_on:
      postgres:
        condition: service_healthy
      init-db:
        condition: service_completed_successfully

  # Postgres Database Service
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: convex
      POSTGRES_USER: convex
      POSTGRES_PASSWORD: convex
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U convex"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - zentile-network

  # Database Initialization Service
  init-db:
    image: postgres:15-alpine
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGUSER: convex
      PGPASSWORD: convex
      PGHOST: postgres
      PGDATABASE: postgres
    command: >
      sh -c '
        if psql -lqt | cut -d \| -f 1 | grep -qw convex; then
          echo "Database already exists";
        else
          createdb convex;
          echo "Database created";
        fi
      '
    restart: "no"
    networks:
      - zentile-network

  convex-dashboard:
    image: ghcr.io/get-convex/convex-dashboard:latest
    stop_grace_period: 10s
    stop_signal: SIGINT
    ports:
      - "${DASHBOARD_PORT:-6791}:6791"
    environment:
      - NEXT_PUBLIC_DEPLOYMENT_URL=${NEXT_PUBLIC_DEPLOYMENT_URL:-http://127.0.0.1:3210}
    depends_on:
      convex-backend:
        condition: service_healthy
    networks:
      - zentile-network

networks:
  zentile-network:
    driver: bridge

volumes:
  postgres_data:
  convex_data:
  admin_keys:
